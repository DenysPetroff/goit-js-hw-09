{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAY,CAChBC,KAAMC,SAASC,cAAc,SAC7BC,gBAAiBF,SAASC,cAAc,uBACxCE,eAAgBH,SAASC,cAAc,sBACvCG,YAAaJ,SAASC,cAAc,wBACpCI,UAAWL,SAASC,cAAc,0BAOpC,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAdPV,EAAUC,KAAKiB,iBAAiB,UAAU,SAAAC,G,OAASA,EAAMC,gB,IAEzDpB,EAAUO,UAAUW,iBAAiB,SAiBrC,WAKE,IAJA,IAAMG,EAAkBC,OAAOtB,EAAUI,gBAAgBmB,OACnDC,EAAiBF,OAAOtB,EAAUK,eAAekB,OACjDE,EAAcH,OAAOtB,EAAUM,YAAYiB,OAExCG,EAAI,EAAGA,EAAID,EAAaC,GAAK,EAAG,CAGvClB,EAFkBkB,EAAI,EACRL,EAAkBK,EAAIF,GAErCG,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAChBmB,EAAA/B,GAASgC,OAAOC,QACX,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAIrDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACbmB,EAAA/B,GAASgC,OAAOI,QACf,sBAAuCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst selectors = {\n  form: document.querySelector('.form'),\n  firstDelayInput: document.querySelector('input[name=\"delay\"]'),\n  delayStepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]')\n}\n \nselectors.form.addEventListener('submit', event => event.preventDefault());\n\nselectors.submitBtn.addEventListener('click', handleSubmit);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\nfunction handleSubmit() { \n  const delayInputValue = Number(selectors.firstDelayInput.value);\n  const stepInputValue = Number(selectors.delayStepInput.value);\n  const amountValue = Number(selectors.amountInput.value);\n\n  for (let i = 0; i < amountValue; i += 1) { \n     const position = i + 1;\n    const delay = delayInputValue + i * stepInputValue;\n    createPromise(position, delay)\n  .then(({ position, delay }) => {\n     Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n         Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n};\n\n\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$selectors","form","document","querySelector","firstDelayInput","delayStepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayInputValue","Number","value","stepInputValue","amountValue","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.4fff292b.js.map"}